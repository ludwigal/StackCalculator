# package calculator

from ast import operator
from math import nan
from enum import Enum
from optparse import OptParseError
from pickletools import float8
from Stack import *
# A calculator for rather simple arithmetic expressions.
# Your task is to implement the missing functions so the
# expressions evaluate correctly. Your program should be
# able to correctly handle precedence (including parentheses)
# and associativity - see helper functions.
# The easiest way to evaluate infix expressions is to transform
# them into postfix expressions, using a stack structure.
# For example, the expression 2*(3+4)^5 is first transformed
# to [ 3 -> 4 -> + -> 5 -> ^ -> 2 -> * ] and then evaluated
# left to right. This is known as Reverse Polish Notation,
# see: https://en.wikipedia.org/wiki/Reverse_Polish_notation
#
# NOTE:
# - You do not need to implement negative numbers
#
# To run the program, run either CalculatorREPL or CalculatorGUI
class missingoperator(Exception):
    pass
class opnotfound(Exception):
    pass
class badoperand(Exception):
    pass
class divzero(Exception):
    pass
MISSING_OPERAND:  str = "Missing or bad operand"
DIV_BY_ZERO:      str = "Division with 0"
MISSING_OPERATOR: str = "Missing operator or bad parenthesis"
OP_NOT_FOUND:     str = "Operator not found"
OPERATORS:        str = "+-*/^"
PARENTHESIS:      str = "()"
actual_stack = Stack()
new_stack = Stack()
    # if it is an operand we push it to the output queue

def if_paranthesis(element, appended_operators):
    if element == "(":
        appended_operators.append(element)
    elif element == ")" and "(" not in appended_operators:
        raise missingoperator
    elif element == ")":
        while appended_operators[-1] != "(": #Poppar allt mellan paranteserna, och pushar in det när man kommer till en slut parantes
            temp = appended_operators.pop()
            actual_stack.push(temp)
        appended_operators.pop()
    return appended_operators

def if_operator(element,appended_operators):
    print(element)
    if element in OPERATORS: #Gör så att operatorerna blir pushade i rätt ordning
        while (len(appended_operators) != 0) and if_associative(element, appended_operators) and does_top_of_stack_have_operator(appended_operators):
            temp = appended_operators.pop()
            actual_stack.push(temp)
        appended_operators.append(element)
    return appended_operators

def if_associative(element, appended_operators):
    if appended_operators[-1] == "(" or ((get_associativity(element) == Assoc.LEFT) and (get_precedence(element) <= get_precedence((appended_operators[-1])))):
        return True
    elif appended_operators[-1] == "(" or ((get_associativity(element) == Assoc.RIGHT) and (get_precedence(element) < get_precedence(appended_operators[-1]))):
        return True
    else:
        return False


def does_top_of_stack_have_operator(appended_operators):
    return True if appended_operators[-1] in OPERATORS else False


def empty_stack(appended_operators):
    while len(appended_operators) != 0:
        temp = appended_operators.pop()
        actual_stack.push(temp)

    return appended_operators

def actual_infix_to_postfix(tokens):
    appended_operators = []
    for i in range(len(tokens)):
        if type(tokens[i]) == float:
            actual_stack.push(tokens[i])
        elif tokens[i] in PARENTHESIS:
            appended_operators = if_paranthesis(tokens[i], appended_operators)
        elif tokens[i] in OPERATORS:
            appended_operators = if_operator(tokens[i], appended_operators)

    appended_operators = empty_stack(appended_operators)
    return reversestack()




def run(current_equation):
    actual_stack.clear()
    tokens = tokenize(current_equation)
    postfix = actual_infix_to_postfix(tokens)
    return postfix

    
def infix_to_postfix(current_equation):
    postfix = run(current_equation)
    return postfix  # TODO
 

# -----  Evaluate RPN expression -------------------
def eval_postfix(postfix_tokens):
    temp_calc_list=[]
    print(postfix_tokens)
    while postfix_tokens.size != 0: # Appendar tal tills det kommer en "charachter" och utför då operationen på de två senaste talen, pga polish notation.
        c = postfix_tokens.pop()
        if c == "(":
            raise missingoperator
        if type(c) != float:
            try:
                a = (apply_operator(c, temp_calc_list.pop(),temp_calc_list.pop()))
            except IndexError:
                raise badoperand
            temp_calc_list.append(a)
        else:
            temp_calc_list.append(float(c))
 
    if len(temp_calc_list) > 1:
        raise missingoperator
    return temp_calc_list[0]


def reversestack():
    while not actual_stack.is_empty():
        new_stack.push(actual_stack.pop())
    return new_stack

# Method used in REPL
def eval_expr(expr: str):
    try:
        if len(expr) == 0:
            return nan
        postfix_tokens = infix_to_postfix(expr)
        return eval_postfix(postfix_tokens)
    except missingoperator:
        actual_stack.clear()
        return MISSING_OPERATOR
    except ValueError:
        actual_stack.clear()
        return MISSING_OPERAND
    except divzero:
        print(actual_stack)
        actual_stack.clear()
        return DIV_BY_ZERO
    except badoperand:
        actual_stack.clear()
        return MISSING_OPERAND
    #except Exception()

def apply_operator(op: str, d1: float, d2: float):
    if op == "/" and (d1 == 0 or d2 == 0):
        raise divzero
    op_switcher = {
        "+": d1 + d2,
        "-": d2 - d1,
        "*": d1 * d2,
        "/": d2 / d1,
        "^": d2 ** d1
    }
    return op_switcher.get(op, ValueError(OP_NOT_FOUND))


def get_precedence(op: str):
    op_switcher = {
        "+": 2,
        "-": 2,
        "*": 3,
        "/": 3,
        "^": 4
    }
    return op_switcher.get(op, ValueError(OP_NOT_FOUND))


class Assoc(Enum):
    LEFT = 1
    RIGHT = 2


def get_associativity(op: str):
    if op in "+-*/":
        return Assoc.LEFT
    elif op in "^":
        return Assoc.RIGHT
    else:
        return ValueError(OP_NOT_FOUND)


# ---------- Tokenize -----------------------
def tokenize(expr: str):
    tokens=[]
    temp_number_list=[]
    b=0
    for element in expr:
        b+=1
        if (element not in OPERATORS) and (element not in PARENTHESIS):
            temp_number_list.append(element)
        elif (element in OPERATORS) or (element in PARENTHESIS):
            if len(temp_number_list) > 0:
                tokens.append(float("".join(temp_number_list)))
                temp_number_list.clear()
            tokens.append(element)
            
        if (element not in PARENTHESIS) and b == (len(expr)):
            if len(temp_number_list) > 1:
                tokens.append(float("".join(temp_number_list)))
            else:
                tokens.append(float(element))

    return tokens
    # return None   # TODO
