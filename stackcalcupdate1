# package calculator

from math import nan
from enum import Enum
from optparse import OptParseError
from pickletools import float8
from Stack import *
# A calculator for rather simple arithmetic expressions.
# Your task is to implement the missing functions so the
# expressions evaluate correctly. Your program should be
# able to correctly handle precedence (including parentheses)
# and associativity - see helper functions.
# The easiest way to evaluate infix expressions is to transform
# them into postfix expressions, using a stack structure.
# For example, the expression 2*(3+4)^5 is first transformed
# to [ 3 -> 4 -> + -> 5 -> ^ -> 2 -> * ] and then evaluated
# left to right. This is known as Reverse Polish Notation,
# see: https://en.wikipedia.org/wiki/Reverse_Polish_notation
#
# NOTE:
# - You do not need to implement negative numbers
#
# To run the program, run either CalculatorREPL or CalculatorGUI

MISSING_OPERAND:  str = "Missing or bad operand"
DIV_BY_ZERO:      str = "Division with 0"
MISSING_OPERATOR: str = "Missing operator or parenthesis"
OP_NOT_FOUND:     str = "Operator not found"
OPERATORS:        str = "+-*/^"
PARENTHESIS:      str = "()"
NUMBERS:          str = "1234567890"
actual_stack = Stack()
new_stack = Stack()
    # if it is an operand we push it to the output queu
def operand_check(element,current_equation,temp_number_list,b):

    if (element not in OPERATORS) and (element not in PARENTHESIS):
        temp_number_list.append(element)
    elif (element in OPERATORS) or (element in PARENTHESIS):
        if len(temp_number_list) > 0:
            actual_stack.push("".join(temp_number_list))
            temp_number_list.clear()
    if (element not in PARENTHESIS) and b == (len(current_equation)):
        if len(temp_number_list) > 1:
            actual_stack.push("".join(temp_number_list))
        else:
            actual_stack.push(element)
    return temp_number_list


def if_paranthesis(element, appended_operands):
    if element == "(":
        appended_operands.append(element)
    elif element == ")" and "(" not in appended_operands:
        appended_operands.append(element)
        return appended_operands
    elif element == ")":
        while appended_operands[-1] != "(":
            temp = appended_operands.pop()
            actual_stack.push(temp)
        appended_operands.pop()

    return appended_operands

def if_operator(element,appended_operands):
    if element in OPERATORS:
        while (len(appended_operands) != 0) and if_associative(element, appended_operands) and does_top_of_stack_have_operator(appended_operands):
            temp = appended_operands.pop()
            actual_stack.push(temp)
        appended_operands.append(element)

    return appended_operands

def if_associative(element, appended_operands):
    print(appended_operands[-1])
    if appended_operands[-1] == "(" or ((get_associativity(element) == Assoc.LEFT) and (get_precedence(element) <= get_precedence((appended_operands[-1])))):
        return True
    elif appended_operands[-1] == "(" or ((get_associativity(element) == Assoc.RIGHT) and (get_precedence(element) < get_precedence(appended_operands[-1]))):
        return True
    else:
        return False


def does_top_of_stack_have_operator(appended_operands):
    return True if appended_operands[-1] in OPERATORS else False


def empty_stack(appended_operands):
    while len(appended_operands) != 0:
        temp = appended_operands.pop()
        actual_stack.push(temp)
    return appended_operands

def bad_operand(element):
        if (element not in NUMBERS and element not in OPERATORS and element not in PARENTHESIS):
            return True


def run(current_equation):
    b = 0
    appended_operands = []
    temp_number_list=[]
    #last_or_double_operator(current_equation)
    for element in current_equation:

        b+=1

        temp_number_list = operand_check(element,current_equation,temp_number_list,b)


        appended_operands = if_paranthesis(element, appended_operands)

        appended_operands = if_operator(element, appended_operands)

    empty_stack(appended_operands)

    return reversestack()

def last_or_double_operator(current_equation):
    if current_equation[-1] in OPERATORS:
        return MISSING_OPERAND
    for i in current_equation:
        if current_equation[i] in PARENTHESIS and current_equation[i-1] not in OPERATORS:
            return MISSING_OPERATOR
    
def bad_parent(current_equation):
    openparent=0
    closedparent=0
    for i in current_equation:
        if i == "(":
            openparent+=1
        if i == ")":
            closedparent+=1
    if openparent != closedparent:
        return True



def infix_to_postfix(current_equation):
    output_queue = run(current_equation)
    return output_queue  # TODO


# -----  Evaluate RPN expression -------------------
def eval_postfix(postfix_tokens):
    temp_calc_list=[]
    while postfix_tokens.size != 0: # Appendar tal tills det kommer en "charachter" och utför då operationen på de två senaste talen, pga polish notation.
        c = postfix_tokens.pop()
        if c in PARENTHESIS:
            return MISSING_OPERATOR
        elif c not in OPERATORS and c not in NUMBERS:
            return OP_NOT_FOUND
        elif c in OPERATORS:
            a = (apply_operator(c, temp_calc_list.pop(),temp_calc_list.pop()))
            temp_calc_list.append(a)
            #if temp_calc_list.pop() == 0:
             #   return DIV_BY_ZERO
        else:
            temp_calc_list.append(float(c))
    return temp_calc_list[0]



def reversestack():
    print(actual_stack)
    while not actual_stack.is_empty():
        new_stack.push(actual_stack.pop())
    print(new_stack)
    return new_stack

# Method used in REPL
def eval_expr(expr: str):
    if len(expr) == 0:
        return nan
    postfix_tokens = infix_to_postfix(expr)
    return eval_postfix(postfix_tokens)


def apply_operator(op: str, d1: float, d2: float):
    op_switcher = {
        "+": d1 + d2,
        "-": d2 - d1,
        "*": d1 * d2,
        "/": DIV_BY_ZERO if d1 == 0 else d2 / d1,
        "^": d2 ** d1
    }
    return op_switcher.get(op, ValueError(OP_NOT_FOUND))


def get_precedence(op: str):
    op_switcher = {
        "+": 2,
        "-": 2,
        "*": 3,
        "/": 3,
        "^": 4
    }
    return op_switcher.get(op, ValueError(OP_NOT_FOUND))


class Assoc(Enum):
    LEFT = 1
    RIGHT = 2


def get_associativity(op: str):
    if op in "+-*/":
        return Assoc.LEFT
    elif op in "^":
        return Assoc.RIGHT
    else:
        return ValueError(OP_NOT_FOUND)


# ---------- Tokenize -----------------------
def tokenize(expr: str):
    return None   # TODO

